{
	"info": {
		"_postman_id": "06293487-3e3d-474e-890c-0be1cd69959c",
		"name": "Group 33_Postman HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23557140"
	},
	"item": [
		{
			"name": "Exercise 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"//1-ый способ\r",
							"var resp_text = pm.response.text();\r",
							"\r",
							"console.log(resp_text)\r",
							"\r",
							"pm.test(\"Check body response is string\", function () {\r",
							"   pm.expect(resp_text).to.eql(\"This is the first responce from server!ss\");\r",
							" });\r",
							"\r",
							"\r",
							"//2-ой способ\r",
							"pm.test(\"Check body response is string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json\r",
							"var resp = pm.response.json();\r",
							"\r",
							"console.log(resp)\r",
							"\r",
							"\r",
							"//4. Проверить, что name в ответе равно name в request (name вбить руками)\r",
							"pm.test(\"Check name_req=name_resp\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Ekaterina\");\r",
							"});\r",
							"console.log(\"name = \", resp.name)\r",
							"\r",
							"\r",
							"//5. Проверить, что age в ответе равно age в request (age вбить руками)\r",
							"pm.test(\"Check age_req=age_resp\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"35\");\r",
							"});\r",
							"console.log(\"age = \", +resp.age)\r",
							"\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"Check salary_req=salary_resp\", function () {\r",
							"    pm.expect(resp.salary).to.eql(3000);\r",
							"});\r",
							"console.log(\"salary = \", +resp.salary)\r",
							"\r",
							"\r",
							"\r",
							"//7. Спарсить request\r",
							"var req = request.data;\r",
							"\r",
							"console.log(req)\r",
							"\r",
							"\r",
							"\r",
							"//8. Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"pm.test(\"Check name_resp=name_req\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//9. Проверить, что age в ответе равно age в request (age забрать из request)\r",
							"pm.test(\"Check age_resp=age_req\", function () {\r",
							"   pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Check salary_resp=salary_req\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response\r",
							"console.log(resp.family)\r",
							"\r",
							"\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check salary_1_5_year\", function () {\r",
							"    pm.expect(req.salary*4).to.eql(resp.family.u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ekaterina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"console.log(resp)\r",
							"\r",
							"\r",
							"\r",
							"// 4. Спарсить request\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"pm.test(\"Check name_resp=name_req\", function () {\r",
							"    pm.expect(resp.name).to.eql(req_url.name);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request)\r",
							"pm.test(\"Check age_resp=age_req\", function () {\r",
							"    pm.expect(resp.age).to.eql(req_url.age);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request)\r",
							"pm.test(\"Check salary_resp=salary_req\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req_url.salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response\r",
							"console.log(resp.family)\r",
							"\r",
							"\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name\r",
							"var RespDog = resp.family.pets.dog;\r",
							"console.log(RespDog) \r",
							"\r",
							"pm.test(\"The dog parameter has name parameters\", function () {\r",
							"     pm.expect(RespDog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"The dog parameter has age parameters\", function () {\r",
							"     pm.expect(RespDog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Parameter name is Luky\", function () {\r",
							"     pm.expect(RespDog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Parameter age is 4\", function () {\r",
							"     pm.expect(RespDog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Ekaterina&age=35&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json\r",
							"var resp = pm.response.json()\r",
							"//console.log(resp)\r",
							"\r",
							"\r",
							"\r",
							"// 4. Спарсить request\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"//console.log(req_url)\r",
							"\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"pm.test(\"Check name_response=name_request\", function () {\r",
							"  pm.expect(resp.name).to.eql(req_url.name);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"Check age_response=age_request\", function () {\r",
							"  pm.expect(resp.age).to.eql(+req_url.age);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request\r",
							"//console.log(req_url.salary)\r",
							"\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response\r",
							"//console.log(resp.salary)\r",
							"\r",
							"\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"var RespSalary_0 = resp.salary[0]\r",
							"//console.log(RespSalary_0)\r",
							"\r",
							"\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"var RespSalary_1 = resp.salary[1]\r",
							"//console.log(RespSalary_1)\r",
							"\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"var RespSalary_2 = resp.salary[2]\r",
							"//console.log(RespSalary_2)\r",
							"\r",
							"\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check 0-element_salary parameter=salary_request\", function () {\r",
							"    pm.expect(RespSalary_0).to.eql(+req_url.salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check 1-element_salary parameter=salary_request*2\", function () {\r",
							"    pm.expect(+RespSalary_1).to.eql(+req_url.salary*2);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Check 2-element_salary parameter=salary_request*3\", function () {\r",
							"    pm.expect(+RespSalary_2).to.eql(+req_url.salary*3);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"var NameEnvir = req_url.name;\r",
							"console.log(NameEnvir)\r",
							"pm.environment.set(\"name\", NameEnvir);\r",
							"\r",
							"\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"var AgeEnvir = req_url.age;\r",
							"console.log(AgeEnvir)\r",
							"pm.environment.set(\"age\", AgeEnvir);\r",
							"\r",
							"\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"var SalaryEnvir = req_url.salary;\r",
							"console.log(SalaryEnvir)\r",
							"pm.environment.set(\"salary\", SalaryEnvir);\r",
							"\r",
							"\r",
							"\r",
							"//??? 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Ekaterina&age=35&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 6. Спарсить response body в json\r",
							"var resp = pm.response.json();\r",
							"console.log(resp)\r",
							"\r",
							"\r",
							"\r",
							"// 7. Спарсить request\r",
							"var req = request.data;\r",
							"//console.log(req)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check json response has start_qa_salary parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check json response has qa_salary_after_6_months parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check json response has qa_salary_after_12_months parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check json response has qa_salary_after_1.5_year parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check json response has qa_salary_after_3.5_years parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check json response has person parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check parameter start_qa_salary=salary from request\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check parameter qa_salary_after_6_months=salary*2 from request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"Check parameter qa_salary_after_12_months=salary*2.7 from request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"Check parameter qa_salary_after_1.5_year=salary*3.3 from request\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check parameter qa_salary_after_3.5_years=salary*3.8 from request\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(+req.salary*3.8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"var RespPersonUName = resp.person.u_name[1];\r",
							"//console.log(RespPersonUName)\r",
							"\r",
							"pm.test(\"Check person_1 element from u_name = salary request\", function () {\r",
							"    pm.expect(RespPersonUName).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"Check parameter u_age=age from request\", function () {\r",
							"   pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"Check parameter u_salary_5_years = salary*4.2 from requestour test name\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"//console.log(req.salary*4.2)\r",
							"\r",
							"// ??? 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}